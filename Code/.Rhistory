cbind(rnorm(50,-5), rnorm(50,-5))
))
data$groups <- rep(c("red","blue","grey80","grey60","grey20"), each=50)
names(data)[1:2] <- c("x","y")
with(data, plot(y ~ x, pch=20, col=groups))
k.means <- kmeans(data[,-3], centers=4, nstart=10)
table(k.means$cluster, data$groups)
#Use gap statistics:
library(splits)
gap.stat <- ddwtGap(data[,c("x","y")])
with(gap.stat, plot(colMeans(DDwGap),pch=15,type='b',
ylim=extendrange(colMeans(DDwGap),f=0.2),
xlab="Number of Clusters", ylab="Weighted Gap Statistic"))
gap.stat$mnGhatWG #gap statistics found best cluster is 4
install.packages("fclus")
install.packages("fclust")
#Fuzzy clustering
library(fclust)
Version
versio
version
install.packages("installr")
library(installr)
updateR()
version
q()
##### Section 1: PCA #####
library(mvtnorm)
set.seed(123)
covariance <- matrix(c(5,3,0,-3,0,3,5,0,-3,0,0,0,5,0,0,-3,-3,0,6,0,0,0,0,0,3), nrow=5)
data <- rmvnorm(1000,sigma=covariance)
colnames(data) <- c("a","b","c","d","e")
pca <- prcomp(data)
biplot(pca)
biplot(pca,choices=2:3)
pca
plot(pca$x[,2]~data[,3], xlab="c variable", ylab="PC2")
summary(pca) #can see relative importance of each axis
plot(pca)
pca <- prcomp(data,scale=TRUE)
biplot(pca)
##Excercises
library(raster)
r <- getData("worldclim", var="bio", res=10 )
e <- extent(150,170,-60,40)
data <- data.frame(na.omit(extract(r, e)))
names(data) <- c("temp.mean","diurnal.range", "isothermality",
"temp.season","max.temp","min.temp","temp.range","temp.wettest",
"temp.driest","temp.mean.warmest","temp.mean.coldest","precip",
"precip.wettest","precip.driest","precip.season","precip.wettest",
"precip.driest","precip.warmest","precip.coldest")
pca <- prcomp(data,scale=TRUE)
biplot(pca)
summary(pca)
pca
plot(pca)
# excercise 2
data(iris)
head(iris[,-5])
pca <- prcomp(iris[,-5],scale=TRUE )
biplot(pca)
pca
plot(pca)
summary(pca)
plot(pca$x[,1:2], pch=20,
col=setNames(c("red","blue","black"),c("setosa","versicolor","virginica")))
##### Section 2: Hierarchical Cluster Analysis #####
data <- data.frame(rbind(
cbind(rnorm(50),rnorm(50)),
cbind(rnorm(50,5), rnorm(50,5)),
cbind(rnorm(50,-5), rnorm(50,-5))
))
# two columns of 3 different groups of data
data$groups <- rep(c("red","blue","black"), each=50)
names(data)[1:2] <- c("x","y")
with(data, plot(y ~ x, pch=20, col=groups))
#calculate euclidean distance matrix
distance <- dist(data[,c("x","y")])
upgma <- hclust(distance,method="average")
plot(upgma)
comp.link <- hclust(distance)
plot(comp.link)
#cut the tree by groups
cut.by.groups <- cutree(upgma, k=2)
plot(cut.by.groups)
cut.by.height <- cutree(upgma, h=8)
plot(cut.by.height)
library(splits)
gap.stat <- ddwtGap(data[,c("x","y")])
with(gap.stat, plot(colMeans(DDwGap),pch=15,type='b',
ylim=extendrange(colMeans(DDwGap),f=0.2),
xlab="Number of Clusters", ylab="Weighted Gap Statistic"))
#shows for how many clusters, what the DDgap is --> basically the optimal cluster number
print(gap.stat$mnGhatWG)
##Excercise 1##
library(cluster)
votes <- na.omit(cluster::votes.repub)
logit <- function(x) log(x/(1-x))
transformed <- logit(votes/100)
distance <- dist(transformed)
upgma <- hclust(distance,method="average")
plot(upgma)
comp.link <- hclust(distance)
plot(comp.link)
gap.stat <- ddwtGap(transformed, genRndm="uni")
with(gap.stat, plot(colMeans(DDwGap),pch=15,type='b',
ylim=extendrange(colMeans(DDwGap),f=0.2),
xlab="Number of Clusters", ylab="Weighted Gap Statistic"))
##### Section 3: K-Means Analysis #####
data <- data.frame(rbind(
cbind(rnorm(50),rnorm(50)),
cbind(rnorm(50,2.5),rnorm(50,2.5)),
cbind(rnorm(50,-2.5),rnorm(50,-2.5)),
cbind(rnorm(50,5), rnorm(50,5)),
cbind(rnorm(50,-5), rnorm(50,-5))
))
data$groups <- rep(c("red","blue","grey80","grey60","grey20"), each=50)
names(data)[1:2] <- c("x","y")
with(data, plot(y ~ x, pch=20, col=groups))
k.means <- kmeans(data[,-3], centers=4, nstart=10)
table(k.means$cluster, data$groups)
#Use gap statistics:
library(splits)
gap.stat <- ddwtGap(data[,c("x","y")])
with(gap.stat, plot(colMeans(DDwGap),pch=15,type='b',
ylim=extendrange(colMeans(DDwGap),f=0.2),
xlab="Number of Clusters", ylab="Weighted Gap Statistic"))
gap.stat$mnGhatWG #gap statistics found best cluster is 4
#Fuzzy clustering
library(fclust)
fuzzy <- FKM(data[,c("x","y")], k=5)
summary(fuzzy)
plot(fuzzy)
install.packages("mclust")
#model based clustering
library(mclust)
model <- Mclust(data[,-3])
summary*model
summary(model)
model
plot(model, what="BIC")
## Excercise
data(iris)
head(iris)
gap.stat <- ddwtGap(iris[,-5])
with(gap.stat, plot(colMeans(DDwGap),pch=15,type='b',
ylim=extendrange(colMeans(DDwGap),f=0.2),
xlab="Number of Clusters", ylab="Weighted Gap Statistic"))
gap.stat$mnGhatWG
#k means:
k.means <- kmeans(data[,-3], centers=3, nstart=10)
table(k.means$cluster, data$groups)
#k means:
k.means <- kmeans(iris[,-5], centers=3, nstart=10)
table(k.means$cluster, data$groups)
#k means:
k.means <- kmeans(iris[,-5], centers=3, nstart=10)
gap.stat$mnGhatWG
table(k.means$cluster, data$groups)
table(k.means$cluster, iris$Species)
# using model selection based:
model <- Mclust(iris[,-5])
summary(model)
model
plot(model, what="BIC")
View(iris)
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,.5), env2=seq(-3,3,.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass)))
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
for(i in seq_len(nrow(biomass))) biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,.5), env2=seq(-3,3,.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))) biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
View(biomass)
library(vegan)
install.packages("vegan")
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
env <- expand.grid(env1=seq(-3,3,.5), env2=seq(-3,3,.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=2, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
View(env)
biomass <- matrix(ncol=2, nrow=nrow(env))
View(biomass)
seq_len(nrow(biomass))
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
library(vegan)
dist <- dist(biomass)
plot(dist)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
for(i in seq_len(nrow(biomass)))
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
for(i in seq_len(nrow(biomass))) biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))) biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))) biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
?expand.grid
env
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
View(biomass)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
dist
View(dist)
head(dist)
tail(dist)
dim(dist)
class(dist)
pcoa <- cmdscale(dist, eig=TRUE)
?barplot
barplot(pcoa$eig)
dist <- vegdist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
example("cmdscale")
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
library(vegan)
biomass
head(biomass)
library(vegan)
dist <- vegdist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
dist <- vegdist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
pcoa$points
View(pcoa)
dist <- vegdist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]+0.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.25, labels=env[,2], col="black")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+0.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.25, labels=env[,2], col="black")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+0.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.25, labels=env[,2], col="black")
text(pcoa$points[,1:2]+0.025, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.025, labels=env[,2], col="black")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+0.025, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.025, labels=env[,2], col="black")
pcoa[["points"]]
View(pcoa$points)
lapply(Yearsublist, function(x) {table(x$In_Hard_Disk)})
#####2. Extracting file names from hard disk and compare#####
rm(list=ls())
DVDinfoNew <- read.csv("../Data/DVDinfo_Updated.csv")
#reading in all the files available in hard disk, compare with database
DiskFile <- read.csv("../Data/HardDiskFile.csv")
FileVect <- DiskFile$Files
#checking if videos exist using regex
Exist <- c(rep(NA,times=nrow(DVDinfoNew)))
NumFile <- c(rep(NA,times=nrow(DVDinfoNew)))
for(i in 1:nrow(DVDinfoNew)){
VidCode <- DVDinfoNew$DVDNumber[i]
#regular expression to search for file:
FilesDetected <- sum(stri_detect_regex(FileVect, VidCode))
if(FilesDetected>0){
Exist[i] <- "Yes"
NumFile[i] <-FilesDetected #number of that file
}else{Exist[i] <- "No"}
}
DVDinfoNew$In_Hard_Disk <- Exist
DVDinfoNew$Number_of_files <- NumFile
##making list by year subset
Years <- na.omit(unique(DVDinfoNew$Year))
#####2. Extracting file names from hard disk and compare#####
rm(list=ls())
DVDinfoNew <- read.csv("../Data/DVDinfo_Updated.csv")
#####2. Extracting file names from hard disk and compare#####
rm(list=ls())
setwd("C:/Documents and Settings/Alex Chan/Documents/SparrowVis/Code/")
DVDinfoNew <- read.csv("../Data/DVDinfo_Updated.csv")
#reading in all the files available in hard disk, compare with database
DiskFile <- read.csv("../Data/HardDiskFile.csv")
FileVect <- DiskFile$Files
#checking if videos exist using regex
Exist <- c(rep(NA,times=nrow(DVDinfoNew)))
NumFile <- c(rep(NA,times=nrow(DVDinfoNew)))
for(i in 1:nrow(DVDinfoNew)){
VidCode <- DVDinfoNew$DVDNumber[i]
#regular expression to search for file:
FilesDetected <- sum(stri_detect_regex(FileVect, VidCode))
if(FilesDetected>0){
Exist[i] <- "Yes"
NumFile[i] <-FilesDetected #number of that file
}else{Exist[i] <- "No"}
}
DVDinfoNew$In_Hard_Disk <- Exist
DVDinfoNew$Number_of_files <- NumFile
##making list by year subset
Years <- na.omit(unique(DVDinfoNew$Year))
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfoNew, DVDinfoNew$Year==Years[i])
}
#summary:
names(Yearsublist)<- as.character(na.omit(unique(DVDinfoNew$Year)))
lapply(Yearsublist, function(x) {table(x$In_Hard_Disk)})
#####2. Extracting file names from hard disk and compare#####
rm(list=ls())
setwd("C:/Documents and Settings/Alex Chan/Documents/SparrowVis/Code/")
DVDinfoNew <- read.csv("../Data/DVDinfo_Updated.csv")
#reading in all the files available in hard disk, compare with database
DiskFile <- read.csv("../Data/HardDiskFile.csv")
FileVect <- DiskFile$Files
#checking if videos exist using regex
Exist <- c(rep(NA,times=nrow(DVDinfoNew)))
NumFile <- c(rep(NA,times=nrow(DVDinfoNew)))
for(i in 1:nrow(DVDinfoNew)){
VidCode <- DVDinfoNew$DVDNumber[i]
#regular expression to search for file:
FilesDetected <- sum(stri_detect_regex(FileVect, VidCode))
if(FilesDetected>0){
Exist[i] <- "Yes"
NumFile[i] <-FilesDetected #number of that file
}else{Exist[i] <- "No"}
}
#####2. Extracting file names from hard disk and compare#####
rm(list=ls())
library(stringi)
setwd("C:/Documents and Settings/Alex Chan/Documents/SparrowVis/Code/")
DVDinfoNew <- read.csv("../Data/DVDinfo_Updated.csv")
#reading in all the files available in hard disk, compare with database
DiskFile <- read.csv("../Data/HardDiskFile.csv")
FileVect <- DiskFile$Files
#checking if videos exist using regex
Exist <- c(rep(NA,times=nrow(DVDinfoNew)))
NumFile <- c(rep(NA,times=nrow(DVDinfoNew)))
for(i in 1:nrow(DVDinfoNew)){
VidCode <- DVDinfoNew$DVDNumber[i]
#regular expression to search for file:
FilesDetected <- sum(stri_detect_regex(FileVect, VidCode))
if(FilesDetected>0){
Exist[i] <- "Yes"
NumFile[i] <-FilesDetected #number of that file
}else{Exist[i] <- "No"}
}
DVDinfoNew$In_Hard_Disk <- Exist
DVDinfoNew$Number_of_files <- NumFile
##making list by year subset
Years <- na.omit(unique(DVDinfoNew$Year))
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfoNew, DVDinfoNew$Year==Years[i])
}
#summary:
names(Yearsublist)<- as.character(na.omit(unique(DVDinfoNew$Year)))
lapply(Yearsublist, function(x) {table(x$In_Hard_Disk)})
View(Yearsublist[["2016"]])
lapply(Yearsublist, function(x) {table(x$In_Hard_Disk)}) #summary table for each year
Data2016 <- Yearsublist[[2016]]
Data2016 <- Yearsublist$2016
Data2016 <- Yearsublist$`2016`
View(Data2016)
Prov2016 <- subset(Data2016,Data2016$TypeOfCare=="Prov")
table(Prov2016$In_Hard_Disk)
Inc2016 <- subset(Data2016,Data2016$TypeOfCare=="Inc")
table(Inc2016$In_Hard_Disk)
View(Data2016)
Data2015 <- Yearsublist$`2015`
Prov2015 <- subset(Data2015,Data2015$TypeOfCare=="Prov")
table(Prov2015$In_Hard_Disk)
Inc2016 <- subset(Data2015,Data2015$TypeOfCare=="Inc")
table(Inc2016$In_Hard_Disk)
lapply(Yearsublist, function(x) {table(x$In_Hard_Disk)}) #summary table for each year
View(Yearsublist[["2009"]])
View(Yearsublist[["2005"]])
DVDinfo <- read.csv("../Data/DVDInfo.csv")
DVDSum<- read.csv("../Data/DVDSummary.csv")
View(DVDinfo)
View(DVDinfoNew)
#inc/prov + day types
DVDinfoNew$TypeDay <- paste(DVDinfoNew$TypeOfCare, DVDinfoNew$Age)
##making list by year subset
DVDinfoNew$TypeDay <- paste(DVDinfoNew$TypeOfCare, DVDinfoNew$Age) #check type (prov/inc) and days after
Years <- na.omit(unique(DVDinfoNew$Year))
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfoNew, DVDinfoNew$Year==Years[i])
}
#summary:
names(Yearsublist)<- as.character(na.omit(unique(DVDinfoNew$Year)))
lapply(Yearsublist, function(x) {table(x$In_Hard_Disk)}) #summary table for each year
lapply(Yearsublist, function(x) {table(x$TypeDay)})
View(Yearsublist)
View(Yearsublist[["2010"]])
lapply(Yearsublist, function(x) {table(x$In_Hard_Disk)}) #summary table for each year
