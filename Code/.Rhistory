env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=2, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
View(env)
biomass <- matrix(ncol=2, nrow=nrow(env))
View(biomass)
seq_len(nrow(biomass))
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
library(vegan)
dist <- dist(biomass)
plot(dist)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
for(i in seq_len(nrow(biomass)))
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
for(i in seq_len(nrow(biomass))) biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))) biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))) biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
?expand.grid
env
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
View(biomass)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
dist
View(dist)
head(dist)
tail(dist)
dim(dist)
class(dist)
pcoa <- cmdscale(dist, eig=TRUE)
?barplot
barplot(pcoa$eig)
dist <- vegdist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
example("cmdscale")
##### Principle Co-ordinate Analysis #####
#simulating dataset:
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env <- expand.grid(env1=seq(-3,3,0.5), env2=seq(-3,3,0.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass))){
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]}
library(vegan)
biomass
head(biomass)
library(vegan)
dist <- vegdist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
dist <- vegdist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
pcoa$points
View(pcoa)
dist <- vegdist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]+0.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.25, labels=env[,2], col="black")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+0.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.25, labels=env[,2], col="black")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+0.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.25, labels=env[,2], col="black")
text(pcoa$points[,1:2]+0.025, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.025, labels=env[,2], col="black")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+0.025, labels=env[,1], col="red")
text(pcoa$points[,1:2]-0.025, labels=env[,2], col="black")
pcoa[["points"]]
View(pcoa$points)
?glm
rm(list=ls())
#reading in all the files available in hard disk, compare with database
setwd("D:/Provision Videos/") #Set working directory to hard drive
rm(list=ls())
list.files()
rm(list=ls())
setwd("C:/Documents and Settings/Alex Chan/Documents/SparrowVis/Code/")
DVDinfo <- read.csv("../Data/")
DVDinfo <- read.csv("../Data/DVDInfo.csv")
View(DVDinfo)
#Adding year column
DVDinfo$Year <- strsplit(DVDinfo$DVDdate,"/")[3]
View(DVDinfo)
strsplit(DVDinfo$DVDdate,"/")
?[[]]
?[[
?"[["
#Adding year column
DVDinfo$Year <- strsplit(DVDinfo$DVDdate,"/")"[["[2]
#Adding year column
Dates <- strsplit(DVDinfo$DVDdate,"/")
DVDinfo$Year <- sapply(Dates, "[[", 3)
unique(DVDinfo$Year)
Vids2010 <- subset(DVDinfo, DVDinfo$Year=="2010")
View(Vids2010)
Vids2011 <- subset(DVDinfo, DVDinfo$Year=="2011")
View(Vids2011)
DVDSum<- read.csv("../Data/DVDSummary.csv")
View(DVDSum)
Vids2019 <- subset(DVDinfo, DVDinfo$Year=="2019")
View(Vids2019)
View(Vids2011)
unique(DVDinfo$Situation)
unique(Vids2019$Situation)
unique(DVDinfo$Year)
Years <- unique(DVDinfo$Year)
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
View(Yearsublist)
#making list by year subset
Years <- unique(DVDinfo$Year)
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfo, DVDinfo$Year==Year[i])
}
View(Yearsublist)
View(Yearsublist[[1]])
View(Yearsublist[[15]])
#making list by year subset
Years <- unique(DVDinfo$Year)
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfo, DVDinfo$Year==Years[i])
}
#making list by year subset
Years <- unique(DVDinfo$Year)
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
i <- 2
Years[i]
Yearsublist[[i]] <- subset(DVDinfo, DVDinfo$Year==Years[i])
View(Yearsublist[[2]])
View(Yearsublist[[7]])
View(Yearsublist[[9]])
#making list by year subset
Years <- unique(DVDinfo$Year)
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfo, DVDinfo$Year==Years[i])
}
View(Yearsublist)
View(Yearsublist[[15]])
unique(Yearsublist[[15]]$Situation)
View(Yearsublist[[16]])
ProvOverview <- read.csv("../Data/ProvisionOverview.csv")
View(ProvOverview)
rm(list=ls())
setwd("C:/Documents and Settings/Alex Chan/Documents/SparrowVis/Code/")
DVDinfo <- read.csv("../Data/DVDInfo.csv")
DVDSum<- read.csv("../Data/DVDSummary.csv")
ProvOverview <- read.csv("../Data/ProvisionOverview.csv")
View(ProvOverview)
View(DVDinfo)
#Remove repeats from ProvOverview
UnqNum <- unique(ProvOverview$DVDNumber)
names(ProvOverview)
ProvOverViewShort <- data.frame(matrix(ncol=9, nrow=0))
colnames(ProvOverViewShort) <- names(ProvOverview)
View(ProvOverViewShort)
i <- 2
print(paste("PANIK MORE THAN 2 AT",UnqNum[i]))
yo1 <- ProvOverview[1,3:9]
yo2 <- ProvOverview[2,3:9]
yo1==yo2
yo2 <- as.character(ProvOverview[2,3:9])
yo1 <- as.character(ProvOverview[1,3:9])
yo1==yo2
#testing
yo1 <- as.character(ProvOverview[588,3:9])
yo2 <- as.character(ProvOverview[7093,3:9])
yo1==yo2
sum(yo1==yo2)
print(paste("SCREAM COLUMNS NOT EQUAL AT DVD#",UnqNum[i]))
print(paste("FOCAL AND PARTNER DOESNT MATCH AT #DVD", UnqNum[i]))
#Remove repeats from ProvOverview
UnqNum <- unique(ProvOverview$DVDNumber)
#preset output dataframe:
ProvOverViewShort <- data.frame(matrix(ncol=9, nrow=length(UnqNum)))
colnames(ProvOverViewShort) <- names(ProvOverview)
#for loop:
for(i in 1:length(UnqNum)){
sub <- subset(ProvOverview, ProvOverview$DVDNumber==UnqNum[i])
if(nrow(sub) > 1){
if(nrow(sub)>2){
#number of rows is more than 2
print(paste("PANIK MORE THAN 2 AT DVD#",UnqNum[i]))
}else{
#number of row is 2, need to check if focal and partner is just flipped
if(sum(as.character(sub[1,3:7])==as.character(sub[2,3:7]))==7){#check if all other columns are equal
#all other columns are equal
if(sum(c(sub[1,1], sub[1,2]))==sum(c(sub[2,1], sub[2,2]))){
#all good, focal and partner switched
ProvOverViewShort[i,] <- sub[1,]
}else{
#partner and focal doesnt match
print(paste("FOCAL AND PARTNER DOESNT MATCH AT #DVD", UnqNum[i]))
}
}else{
#other columns are not equal
print(paste("SCREAM COLUMNS NOT EQUAL AT DVD#",UnqNum[i]))
}
}
}else{
#number of rows is 1
ProvOverViewShort[i,] <- sub[1,]
}
}
#Remove repeats from ProvOverview
UnqNum <- unique(ProvOverview$DVDNumber)
#preset output dataframe:
ProvOverViewShort <- data.frame(matrix(ncol=9, nrow=length(UnqNum)))
colnames(ProvOverViewShort) <- names(ProvOverview)
#for loop:
for(i in 1:length(UnqNum)){
sub <- subset(ProvOverview, ProvOverview$DVDNumber==UnqNum[i])
if(nrow(sub) > 1){
if(nrow(sub)>2){
#number of rows is more than 2
print(paste("PANIK MORE THAN 2 AT DVD#",UnqNum[i]))
}else{
#number of row is 2, need to check if focal and partner is just flipped
if(sum(as.character(sub[1,5:9])==as.character(sub[2,5:9]))==5){#check if all other columns are equal
#all other columns are equal
if(sum(c(sub[1,1], sub[1,2]))==sum(c(sub[2,1], sub[2,2]))){
#all good, focal and partner switched
ProvOverViewShort[i,] <- sub[1,]
}else{
#partner and focal doesnt match
print(paste("FOCAL AND PARTNER DOESNT MATCH AT #DVD", UnqNum[i]))
}
}else{
#other columns are not equal
print(paste("SCREAM COLUMNS NOT EQUAL AT DVD#",UnqNum[i]))
}
}
}else{
#number of rows is 1
ProvOverViewShort[i,] <- sub[1,]
}
}
View(ProvOverViewShort)
#merging ProvOverview and DVDinfo
Provsub <- ProvOverViewShort[,-4]
View(Provsub)
source('~/SparrowVis/Code/DVDSummary.R')
?merge
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
#merging ProvOverview and DVDinfo
Provsub <- ProvOverViewShort[,-4] #remove age column, will overlap
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
View(DVDinfoNew)
DVDinfoNew <- DVDinfoNew[-is.na(DVDinfoNew$DVDNumber), ]
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
DVDinfoNew <- DVDinfoNew[-is.na(DVDinfoNew$DVDNumber), ]
is.na(DVDinfoNew$DVDNumber)
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
DVDinfoNew <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDNumber)), ]
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
DVDinfoNew <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDNumber)), ]
#quick test: for the rows that both have data, does DVDRef.x and DVDRef.y match?
noNAsub <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDRef.x)),]
noNAsub$Boolean <- noNAsub$DVDRef.x==noNAsub$DVDRef.y
View(noNAsub)
unique(noNAsub$Boolean)
##Create type of data (incubation6/12, provision 7/11):
DVDinfoNew$Type <- paste(DVDinfoNew$TypeOfCare,DVDinfoNew$Age)
unique(DVDinfoNew$Type)
DVDinfoNew$Test <- paste(DVDinfoNew$TypeOfCare, DVDinfoNew$Situation)
unique(DVDinfoNew$Test)
rm(list=ls())
setwd("C:/Documents and Settings/Alex Chan/Documents/SparrowVis/Code/")
DVDinfo <- read.csv("../Data/DVDInfo.csv")
DVDSum<- read.csv("../Data/DVDSummary.csv")
ProvOverview <- read.csv("../Data/ProvisionOverview.csv") #overview of provision/ incubation
#Remove repeats from ProvOverview
UnqNum <- unique(ProvOverview$DVDNumber)
#preset output dataframe:
ProvOverViewShort <- data.frame(matrix(ncol=9, nrow=length(UnqNum)))
colnames(ProvOverViewShort) <- names(ProvOverview)
#for loop:
for(i in 1:length(UnqNum)){
sub <- subset(ProvOverview, ProvOverview$DVDNumber==UnqNum[i])
if(nrow(sub) > 1){
if(nrow(sub)>2){
#number of rows is more than 2
print(paste("PANIK MORE THAN 2 AT DVD#",UnqNum[i]))
}else{
#number of row is 2, need to check if focal and partner is just flipped
if(sum(as.character(sub[1,5:9])==as.character(sub[2,5:9]))==5){#check if all other columns are equal
#all other columns are equal
if(sum(c(sub[1,1], sub[1,2]))==sum(c(sub[2,1], sub[2,2]))){
#all good, focal and partner switched
ProvOverViewShort[i,] <- sub[1,]
}else{
#partner and focal doesnt match
print(paste("FOCAL AND PARTNER DOESNT MATCH AT #DVD", UnqNum[i]))
}
}else{
#other columns are not equal
print(paste("SCREAM COLUMNS NOT EQUAL AT DVD#",UnqNum[i]))
}
}
}else{
#number of rows is 1
ProvOverViewShort[i,] <- sub[1,]
}
}
#merging ProvOverview and DVDinfo
Provsub <- ProvOverViewShort[,-4] #remove age column, will overlap
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
DVDinfoNew <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDNumber)), ]
#quick test: for the rows that both have data, does DVDRef.x and DVDRef.y match?
noNAsub <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDRef.x)),]
noNAsub$Boolean <- noNAsub$DVDRef.x==noNAsub$DVDRef.y
unique(noNAsub$Boolean) #only trues found, test passed
##Create type of data (incubation6/12, provision 7/11):
DVDinfoNew$Type <- paste(DVDinfoNew$TypeOfCare,DVDinfoNew$Age)
#merging ProvOverview and DVDinfo
Provsub <- ProvOverViewShort[,-4] #remove age column, will overlap
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
DVDinfoNew <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDNumber)), ]
#quick test: for the rows that both have data, does DVDRef.x and DVDRef.y match?
noNAsub <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDRef.x)),]
noNAsub$Boolean <- noNAsub$DVDRef.x==noNAsub$DVDRef.y
unique(noNAsub$Boolean) #only trues found, test passed
#merging ProvOverview and DVDinfo
Provsub <- ProvOverViewShort[,-4] #remove age column, will overlap
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
View(DVDinfoNew)
DVDinfoNew <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDNumber)), ]
#merging ProvOverview and DVDinfo
Provsub <- ProvOverViewShort[,-4] #remove age column, will overlap
DVDinfoNew <- merge(Provsub, DVDinfo, by="DVDNumber", all=T)
which(is.na(DVDinfoNew$DVDNumber))
View(Provsub)
#quick test: for the rows that both have data, does DVDRef.x and DVDRef.y match?
noNAsub <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDRef.x)),]
noNAsub$Boolean <- noNAsub$DVDRef.x==noNAsub$DVDRef.y
unique(noNAsub$Boolean) #only trues found, test passed
##Create type of data (incubation6/12, provision 7/11):
DVDinfoNew$Type <- paste(DVDinfoNew$TypeOfCare,DVDinfoNew$Age)
unique(DVDinfoNew$Type)
DVDinfoNew$TestSituation <- paste(DVDinfoNew$TypeOfCare, DVDinfoNew$Situation)
unique(DVDinfoNew$Test)
#making list by year subset
Years <- unique(DVDinfo$Year)
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
write.csv(DVDinfoNew, file="../Data/DVDinfo_Updated.csv")
#quick test: for the rows that both have data, does DVDRef.x and DVDRef.y match?
noNAsub <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDRef.x)),]
noNAsub$Boolean <- noNAsub$DVDRef.x==noNAsub$DVDRef.y
unique(noNAsub$Boolean) #only trues found, test passed
##Create type of data (incubation6/12, provision 7/11):
DVDinfoNew$Type <- paste(DVDinfoNew$TypeOfCare,DVDinfoNew$Age)
unique(DVDinfoNew$Type)
#quick test: for the rows that both have data, does DVDRef.x and DVDRef.y match?
noNAsub <- DVDinfoNew[-which(is.na(DVDinfoNew$DVDRef.x)),]
noNAsub$Boolean <- noNAsub$DVDRef.x==noNAsub$DVDRef.y
unique(noNAsub$Boolean) #only trues found, test passed
##Create type of data (incubation6/12, provision 7/11):
DVDinfoNew$Type <- paste(DVDinfoNew$TypeOfCare,DVDinfoNew$Age)
unique(DVDinfoNew$Type)
DVDinfoNew$TestSituation <- paste(DVDinfoNew$TypeOfCare, DVDinfoNew$Situation)
unique(DVDinfoNew$Test)
#testing if the situation is really what they mean
DVDinfoNew$TestSituation <- paste(DVDinfoNew$TypeOfCare, DVDinfoNew$Situation)
unique(DVDinfoNew$Test)
##Create type of data (incubation6/12, provision 7/11):
DVDinfoNew$Type <- paste(DVDinfoNew$TypeOfCare,DVDinfoNew$Age)
unique(DVDinfoNew$Type)
#####Extracting file names from hard disk#####
##making list by year subset
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfoNew, DVDinfoNew$Year==Years[i])
}
#####Extracting file names from hard disk#####
##making list by year subset
Years <- unique(DVDinfoNew$Year)
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfoNew, DVDinfoNew$Year==Years[i])
}
View(Yearsublist)
View(Yearsublist[[2]])
YEars
Years
?unique
#####Extracting file names from hard disk#####
##making list by year subset
Years <- unique(DVDinfoNew$Year, na.last=NA)
YEars
Years
#####Extracting file names from hard disk#####
##making list by year subset
Years <- unique(DVDinfoNew$Year)
Years
as.integer(YEars)
as.integer(Years)
as.numeric(Years)
na.omt(Years)
na.omit(Years)
#####Extracting file names from hard disk#####
##making list by year subset
Years <- na.omit(unique(DVDinfoNew$Year))
Yearsublist <- vector(mode="list", length=length(Years)) #preallocate list for year subsets
for(i in 1:length(Years)){
Yearsublist[[i]] <- subset(DVDinfoNew, DVDinfoNew$Year==Years[i])
}
View(Yearsublist)
View(Yearsublist[[2]])
View(DVDinfoNew)
View(DVDinfo)
View(Yearsublist)
View(Yearsublist[[16]])
