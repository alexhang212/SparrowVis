q()
x <- 1:100
primes <- c()
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){ #if there is a divisor, breaks out of loop
#there is a divisor
break
}elif(i%%j > 0){
#nothing happens
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){ #if there is a divisor, breaks out of loop
break}elif(i%%j > 0){
#nothing happens
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){break}elif(i%%j > 0){
#nothing happens
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){break}elif(i%%j > 0){
#nothing happens
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){break}elif(i%%j > 0){
#nothing happens
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){break
}elif(i%%j > 0){
next
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
x <- 1:100
primes <- c()
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){
break
}elif(i%%j > 0){
next
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){
break
}elif(i%%j > 0){
next
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
clear()
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){
break
}elif(i%%j > 0){
next
}else{
primes <- c(primes,i)
}
}
}
return(primes)
}
i <- 7
j <- 6
if(i%%j == 0 & i!=j){#Is a divisor
break
}else{
if(i%%j > 0){
next
}else{
primes <- c(primes,i)}
}
x <- 1:100
primes <- c()
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){#Is a divisor
break
}else{
if(i%%j > 0){
next
}else{
primes <- c(primes,i)}
}
}
}
return(primes)
}
FindPrime(1:100)
i <- 7
j <- 6
if(i%%j == 0 & i!=j){#Is a divisor
print('yo')
}else{
if(i%%j > 0){
print('yo2')
}else{
primes <- c(primes,i)}
}
i <- 7
j <- 7
if(i%%j == 0 & i!=j){#Is a divisor
print('yo')
}else{
if(i%%j > 0){
print('yo2')
}else{
primes <- c(primes,i)}
}
i <- 8
j <- 4
if(i%%j == 0 & i!=j){#Is a divisor
print('yo')
}else{
if(i%%j > 0){
print('yo2')
}else{
primes <- c(primes,i)}
}
FindPrime <- function(x){
for(i in 1:length(x)){
for(j in 1:i){
if(i%%j == 0 & i!=j){#Is a divisor
}else{
if(i%%j > 0){
}else{
primes <- c(primes,i)}
}
}
}
return(primes)
}
FindPrime(1:100)
source('~/Documents/Group1/Code/PP_Regress_loc.R')
load("/home/alex2/Desktop/angelo/NDVI.0035.Buffer.rda")
yo <- NDVI.0035.int[,1:20]
#Load a trained CNN, input 1 file, determine accuracy
rm(list=ls())
#Load a trained CNN, input 1 file, determine accuracy
rm(list=ls())
library(keras)
#Load a trained CNN, input 1 file, determine accuracy
rm(list=ls())
library(keras)
FileName <- "VO0018_VP11_ML5_20150621"
load(paste("../Data/Arrays/",FileName,"_Array.rda",sep=""))
setwd("Documents/SparrowVis/Code")
t
t
#Load a trained CNN, input 1 file, determine accuracy
rm(list=ls())
library(keras)
FileName <- "VO0018_VP11_ML5_20150621"
load(paste("../Data/Arrays/",FileName,"_Array.rda",sep=""))
load(paste("../Data/Arrays/",FileName,"_ImageID.rda",sep=""))
getwd()
#Load a trained CNN, input 1 file, determine accuracy
rm(list=ls())
library(keras)
FileName <- "VO0018_VP11_LM40_20150505"
load(paste("../Data/Arrays/",FileName,"_Array.rda",sep=""))
load(paste("../Data/Arrays/",FileName,"_ImageID.rda",sep=""))
#Load trained CNN model:
CNN <- load_model_hdf5("../Data/Arrays/TrainedCNN3")
CNN %>% evaluate(ImageVal,ImageID)
predictions <- predict(CNN, ImageVal)
#Verify accuracy:
table(apply(predictions,1,which.max), ImageID)
predictiondf <- data.frame(predictions)
predictiondf$Predict<- apply(predictions,1,which.max)
predictiondf$Actual <- ImageID+1
predictiondf$match <- predictiondf$Predict==predictiondf$Actual
FrameLongCoded <- read.csv(paste("../Data/Frames/",FileName,"/FramesLongCoded.csv", sep=""))
FrameLongCoded <- na.omit(FrameLongCoded,FrameLongCoded$Sex)
predictiondf$Frame <- FrameLongCoded$Frame
CombinedData <- cbind(FrameLongCoded, predictiondf) #Combine predictions with long coded df
#quick tests:
sum((CombinedData$Sex+1)==CombinedData$Actual)==nrow(CombinedData) # sex matches up
## Match with short:
FrameShort <- read.csv(paste("../Data/Frames/",FileName,"/FramesShort.csv", sep=""))
#preallocate columns:
FrameShort$PredictSex <- "NA"
FrameShort$Probability <- "NA"
FrameShort$ActualSex <- "NA"
UnqEvents <- unique(CombinedData$Event) # only take events that are present (wont happen if this is analyzing not analyzed data)
#calculate most probabilities for male/female
for(i in 1:length(UnqEvents)){
sub <- subset(CombinedData, CombinedData$Event==UnqEvents[i])
FemProb <- sum(sub$X1)/nrow(sub)
MaleProb <- sum(sub$X2)/nrow(sub)
if(isTRUE(FemProb > MaleProb)){
#If female probability higher
FrameShort$PredictSex[UnqEvents[i]] <- "F"
FrameShort$Probability[UnqEvents[i]] <- FemProb
}else{
#if male probability higher
FrameShort$PredictSex[UnqEvents[i]] <- "M"
FrameShort$Probability[UnqEvents[i]] <- MaleProb
}
#just for now: put actual male/female
if(isTRUE(sub$Actual[1]==1)){
FrameShort$ActualSex[UnqEvents[i]] <- "F"
}else{
FrameShort$ActualSex[UnqEvents[i]] <- "M"
}
}
FrameShort <-FrameShort[!FrameShort$PredictSex=="NA",]
FrameShort$Match <- FrameShort$PredictSex==FrameShort$ActualSex
print(paste("Accuracy of", sum(FrameShort$Match)/nrow(FrameShort)))
